(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'Spanish.json'"
p3
sS'layer'
p4
S'E:\\web2py\\applications\\leg_catedes\\controllers/medica.py'
p5
sS'code'
p6
S'\t\nfrom gluon.serializers import json\ndef medica():\n\tset_todo=db(db.legajo).select()\n\tmf = json(set_todo)\n\treturn dict(set_todo=set_todo,mf=mf)\ndef mostrar():\n\tdni=request.args[0]\n\tset_todo=db(db.n_medicas.dni==dni).select()\n\tcuanto=len(set_todo)\n\tcuanto=int(cuanto)\n\t\n\tif cuanto==0:\n\t\tredirect(URL(c=\'medica\',f=\'mensaje\',args=[dni]))\n\telse:\n\t\tmf = json(set_todo)\n \n\treturn dict(dni=dni,set_todo=set_todo,cuanto=cuanto,mf=mf)#(set_todo=set_todo,mf=mf)\ndef mensaje():\n\tdni=request.args[0]\n\treturn dict(dni=dni)\ndef ingreso():\n\tfrom datetime import datetime, date, time, timedelta\n\timport datetime\n\timport time\n\timport calendar\n\t\n\tdni=request.args[0]\n\tset_leg=db(db.legajo.dni==dni).select().first()\n\tnombre=set_leg.nombre\n\tapellido=set_leg.apellido\n\tform=SQLFORM.factory(\n\tField(\'dni\',\'integer\'),\n    Field(\'apellido\',requires=IS_UPPER()),\n    Field(\'nombre\',requires=IS_UPPER()),\n\tField(\'fecha\',\'datetime\',label="fecha de ingreso de nota",requires=[IS_NOT_EMPTY(error_message=\'El campo no puede estar vacio ej: 20/02/2000\'), IS_DATE(format=\'%d/%m/%Y\'),]),\n    Field(\'diagnostico\',requires=IS_UPPER()),\n    Field(\'reposo\',\n\t\t\trequires=[IS_MATCH(\'^[0-9\\s]+$\',error_message="Ingrese la cantidad de dias con numeros"),\n\t\t\t\t\t\tIS_NOT_EMPTY()]),\t\t \n    Field(\'t_reposo\',requires=IS_IN_SET(["Absoluto","Relativo"],error_message=\'Elija el tipo de reposo\'),),\n    Field(\'medico\',requires=IS_UPPER(),label="Medico otorgante"), \n    Field(\'fecha_c\',\'datetime\',label="fecha de cumplimiento",requires=[IS_NOT_EMPTY(error_message=\'El campo no puede estar vacio ej: 20/02/2000\'), IS_DATE(format=\'%d/%m/%Y\'),]),\n\n\t\t)\n\tif form.accepts(request,session):\n\t\tdb.n_medicas.insert(dni=dni,apellido=apellido,nombre=nombre,fecha=form.vars.fecha,diagnostico=form.vars.diagnostico,\n\t\t\treposo=form.vars.reposo,t_reposo=form.vars.t_reposo,medico=form.vars.medico,fecha_c=form.vars.fecha_c)\t\n\t\tredirect(URL(c=\'medica\',f=\'cargado\',args=[dni]))\n\telif form.errors:\n        \tresponse.flash = \'el formulario tiene errores\'\n    \telse:\n        \tresponse.flash = \'por favor complete el formulario\'\n\treturn dict(set_leg=set_leg,nombre=nombre,apellido=apellido,dni=dni,form=form)\n\ndef cargado():\n\treturn dict()\n\n\nresponse._vars=response._caller(mostrar)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "E:\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "E:\\web2py\\applications\\leg_catedes\\controllers/medica.py", line 60, in <module>\n  File "E:\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "E:\\web2py\\applications\\leg_catedes\\controllers/medica.py", line 9, in mostrar\n    set_todo=db(db.n_medicas.dni==dni).select()\n  File "E:\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "E:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "E:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "E:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "E:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "E:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "E:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "E:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1435, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'Spanish.json\'\n'
p11
s.